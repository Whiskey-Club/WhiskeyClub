@page "/add/review"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Models.Spirits
@using Models.Reviews
@using Models.Authors

@inject NavigationManager navigationManager
@inject IReviewRepository reviewRepository
@inject ISpiritRepository spiritRepository

<div class="container">
    <div class="row">
        <h2>Add a new spirit review</h2>
    </div>

    @if (failed)
    {
        <div class="row" >
            <div class="col-8">
                <div class="alert alert-danger" role="alert">
                    Review could not be added!
                </div>
            </div>
        </div>
    }

    <EditForm Model="@review" OnValidSubmit="@HandleValidSubmitAsync">
        <div class="form-group">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-4">
                    <InputText class="form-control form-control-lg" id="authorName" @bind-Value="review.AuthorName" placeholder="Author Name" />
                </div>
            </div>
            <div class="row">
                <div class="col-4">
                    <select class="form-control form-control-lg selectpicker" @bind="@selectedSpiritId">
                        <option value="" disabled selected>Select a spirit...</option>
                        @if (this.spirits == null)
                        {
                            <option>Loading...</option>
                        }
                        else
                        {
                            foreach (var spirit in this.spirits)
                            {
                                <option value="@spirit.Id">@spirit.Name by @spirit.Brand</option>
                            }
                        }                        
                    </select>
                </div>
                <div class="col-4">
                    <InputNumber class="form-control form-control-lg" id="rating" @bind-Value="review.Rating" placeholder="Rating" />
                </div>
            </div>
            <div class="row">
                <div class="col-8">
                    <InputTextArea class="form-control form-control-lg" id="notes" @bind-Value="review.Notes" placeholder="Notes" rows="4" />
                </div>
            </div>
            <div class="row">
                <div class="col-5"></div>
                <div class="col-3">
                    <button class="form-control form-control-lg btn btn-primary" type="submit">Add</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {

    private bool failed = false;
    private IEnumerable<Spirit> spirits;
    private string selectedSpiritId;
    private ReviewComponentModel review = new ReviewComponentModel(Guid.NewGuid().ToString());

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
        this.spirits = await this.spiritRepository.GetAllSpiritsAsync(cts.Token);
    }

    private async Task HandleValidSubmitAsync()
    {
        this.failed = false;

        // TODO: Need to get the current user
        var author = new Author(Guid.NewGuid().ToString())
        {
            Name = this.review.AuthorName,
        };
        
        var spirit = this.spirits.First(s => s.Id == this.selectedSpiritId);
        var review = author.CreateReview(spirit, this.review.Rating, this.review.Notes);
        
        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
        var result = await this.reviewRepository.AddReviewAsync(review, cts.Token);
        if (result)
        {
            this.navigationManager.NavigateTo("reviews");
        }
        else
        {
            this.failed = true;
        }
    }
}