@page "/reviews"
@using Models.Reviews;
@inject NavigationManager navigationManager
@inject IReviewRepository reviewRepository

<PageTitle>Whiskey Reviews</PageTitle>

<div class="container">
    <AuthorizeView>
        <Authorized>
            <div class="d-flex flex-row-reverse">
                <div class="p-2">
                    <button type="button" class="btn btn-primary" @onclick="AddReviewClicked">
                        <i class="fa-solid fa-plus"></i>&nbsp;&nbsp;Review
                    </button>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
    <div class="row">
        @if (this.isLoading)
        {
            <h2>Loading reviews...</h2>
        }
        else if (this.reviews == null || !this.reviews.Any())
        {
            <h2>No reviews could be found!</h2>
        }
        else
        {        
            foreach (var review in this.reviews)
            {
                <div class="card" style="width: 18rem;">
                    <div class="card-body">
                        <h5 class="card-title">@review.Spirit.Name</h5>
                        <h6 class="card-subtitle mb-2 text-muted">By @review.AuthorName on @review.Created</h6>
                        @for (int i = 0; i < 5; i++)
                        {
                            if (i < review.Rating)
                            {
                                <i class="fa-solid fa-star"></i>
                            }
                            else
                            {
                                <i class="fa-regular fa-star"></i>
                            }
                        }
                        <p class="card-text">@review.Notes</p>
                        <a href="reviews/@review.Id" class="card-link">Read more</a>
                    </div>
                </div>
            }
        }        
    </div>
</div>

@code {
    bool isLoading;
    private int currentCount = 0;
    private IEnumerable<Review> reviews = null;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        this.isLoading = true;
        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
            this.reviews = await this.reviewRepository.GetAllReviewsAsync(cts.Token);
        }
        finally
        {
            this.isLoading = false;
        }
    }

    private void AddReviewClicked()
    {
        this.navigationManager.NavigateTo("add/review");
    }
}
